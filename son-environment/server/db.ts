/**
 * @file server/db.ts
 * @description Handles SQLite database connection and schema initialization.
 *
 * This module connects to the SQLite database file specified, ensures the necessary
 * directory exists, creates the database file if it doesn't exist, and sets up
 * the required table schema (`son_classes`, `son_methods`, `son_base_environment`).
 * It exports the initialized database instance for use throughout the server application.
 *
 * @dependencies
 * - bun:sqlite: For interacting with the SQLite database.
 * - node:fs: For file system operations (checking/creating directories).
 * - node:path: For handling file paths consistently.
 *
 * @notes
 * - The database schema is defined according to the technical specification.
 * - `CREATE TABLE IF NOT EXISTS` is used to make schema initialization idempotent.
 * - The database instance is exported directly after initialization.
 */

import { Database } from "bun:sqlite";
import fs from "node:fs";
import path from "node:path";

// Define the path to the database file
const dbDir = path.join(import.meta.dir, "data");
const dbPath = path.join(dbDir, "son_environment.sqlite");

// Ensure the data directory exists
if (!fs.existsSync(dbDir)) {
	console.log(`Creating database directory at: ${dbDir}`);
	fs.mkdirSync(dbDir, { recursive: true });
}

console.log(`Initializing database at: ${dbPath}`);

// Initialize the database connection
// The { create: true } option automatically creates the file if it doesn't exist.
export const db = new Database(dbPath, { create: true });

/**
 * Initializes the database schema by creating tables if they don't already exist.
 * This function is executed immediately when the module is loaded.
 */
const initializeDatabase = () => {
	console.log("Running database schema initialization...");

	// Transaction for atomic schema creation
	db.transaction(() => {
		// Create son_classes table
		// Stores the names of SON "classes" (objects acting as classes).
		db.run(`
      CREATE TABLE IF NOT EXISTS son_classes (
        id TEXT PRIMARY KEY,           -- UUID generated by the server
        name TEXT UNIQUE NOT NULL,     -- The unique name of the class used in SON
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP -- Timestamp of creation
      );
    `);
		console.log("Checked/Created son_classes table.");

		// Create index on son_classes name for faster lookups
		db.run(`
      CREATE INDEX IF NOT EXISTS idx_son_classes_name ON son_classes (name);
    `);
		console.log("Checked/Created index idx_son_classes_name.");

		// Create son_methods table
		// Stores method definitions associated with classes.
		db.run(`
      CREATE TABLE IF NOT EXISTS son_methods (
        id TEXT PRIMARY KEY,              -- UUID generated by the server
        class_id TEXT NOT NULL,           -- Foreign key referencing son_classes.id
        selector TEXT NOT NULL,           -- The method selector (e.g., "value:", "at:put:")
        arguments_json TEXT NOT NULL,     -- JSON string representation of the argument names array (e.g., '["a", "b"]')
        body_json TEXT NOT NULL,          -- JSON string representation of the method body array (e.g., '[["^", ["$a", "+", "$b"]]]')
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Timestamp of creation
        UNIQUE(class_id, selector),       -- Ensure a class has only one method with a given selector
        FOREIGN KEY (class_id) REFERENCES son_classes(id) ON DELETE CASCADE -- Optional: Cascade deletes if a class is removed
      );
    `);
		console.log("Checked/Created son_methods table.");

		// Create index on son_methods class_id for faster lookups of methods for a class
		db.run(`
      CREATE INDEX IF NOT EXISTS idx_son_methods_class_id ON son_methods (class_id);
    `);
		console.log("Checked/Created index idx_son_methods_class_id.");

		// Create son_base_environment table
		// Stores core definitions (base classes, objects, methods) loaded on startup.
		db.run(`
      CREATE TABLE IF NOT EXISTS son_base_environment (
        key TEXT PRIMARY KEY,             -- The top-level key for the base definition (e.g., "Number", "String", "Transcript")
        value_json TEXT NOT NULL          -- JSON string representation of the SON object/class definition associated with the key
      );
    `);
		console.log("Checked/Created son_base_environment table.");
	})(); // Immediately invoke the transaction

	console.log("Database schema initialization complete.");
};

// Run initialization logic when the module loads
initializeDatabase();

// Optional: Add a check to confirm connection
try {
	const query = db.query("SELECT count(*) as count FROM sqlite_master");
	const result = query.get();
	console.log(`Database connection successful. Found ${result?.count} tables/indexes.`);
} catch (error) {
	console.error("Database connection check failed:", error);
}